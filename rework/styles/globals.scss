@import "bootstrap/scss/functions";
@import "bootstrap/scss/variables";
@import "bootstrap/scss/variables-dark";
@import "bootstrap/scss/mixins/breakpoints";

html,
body {
  margin: 0;
  padding: 0;
  font-family: Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,
    Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

body {
  min-height: 100vh;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
}

h1,
h2,
p,
ul {
  margin: 0;
}

ul {
  padding: 0;
  list-style: none;
}

html:focus-within {
  scroll-behavior: smooth;
}

a {
  text-decoration-skip-ink: auto;
}

input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}


.form-group .input-group>.form-control~label {
  // Bring above input (see bootstrap/scss/forms/_input-group.scss line 25)
  z-index: 6;
}

.was-validated .form-group>.form-control:valid:focus~label,
.form-group>.form-control.is-valid:focus~label,
.was-validated .form-group>.form-control:valid.non-empty~label,
.form-group>.form-control.is-valid.non-empty~label {
  color: var(--bs-success);
}

.was-validated .form-group>.form-control:invalid:focus~label,
.form-group>.form-control.is-invalid:focus~label,
.was-validated .form-group>.form-control:invalid.non-empty~label,
.form-group>.form-control.is-invalid.non-empty~label {
  color: var(--bs-danger);
}

// Removes number pickers
// TODO: Add new ones
input[type=number].form-control::-webkit-outer-spin-button,
input[type=number].form-control::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type=number].form-control {
  -moz-appearance: textfield;
  -webkit-appearance: textfield;
  appearance: textfield;
}


// Add "thin" floating form control
:root,
[data-bs-theme="light"] {
  --thin-form-floating-label-focus-color: #316ecf;
}

[data-bs-theme="dark"] {
  --thin-form-floating-label-focus-color: #6da7ff;
}

.thin.form-floating> {

  .form-control,
  .form-control-plaintext {
    padding: 0.375rem 0.75rem;
    line-height: 1.5;
    height: unset;
  }

  label {
    padding: 0;
    top: 0;
    left: 0;
    transform: translate($input-padding-x, $input-padding-y);
    width: unset;
    height: unset;
    max-width: calc(100% - $input-padding-x * 2);
    background-color: var(--bs-form-control-bg);
    // background-color: red;
    border-radius: .25rem;
    $transition-time: .15s;
    $transition-method: ease-in-out;
    $transition-options: $transition-time $transition-method;
    transition:
      transform $transition-options,
      padding $transition-options,
      max-width $transition-options,
      color $transition-options;
  }

  .form-control:focus~label,
  .form-control:not(:placeholder-shown)~label,
  .form-control-plaintext~label,
  .form-select~label {
    $space-left: .55rem;
    $space-right: .75rem;
    padding: 0 0.4rem;
    top: 0;
    left: 0;
    max-width: calc((100%) / 0.85 - ($space-left + $space-right));
    transform: translateY(-0.725em) translateX($space-left) scale(0.85);
    opacity: 1;
  }

  .form-control:focus~label {
    color: var(--thin-form-floating-label-focus-color);
  }

  .form-control:disabled~label {
    background-color: var(--bs-form-control-disabled-bg);
    border-top: var(--bs-border-width) solid var(--bs-border-color);
    color: var(--bs-body-color);
    box-shadow: $input-box-shadow;
  }

  .was-validated .form-control:disabled:valid~label,
  .form-control:disabled.is-valid~label {
    border-top-color: var(--bs-success);
  }

  .was-validated .form-control:disabled:invalid~label,
  .form-control:disabled.is-invalid~label {
    border-top-color: var(--bs-danger);
  }
}


// :root,
// [data-bs-theme="light"] {
//   .character-creator {
//     .attribute-resistance-fortitude input,
//     .resistance-points-fortitude input {
//       border-color: #F00;
//     }

//     .attribute-resistance-reflex input,
//     .resistance-points-reflex input {
//       border-color: #0F0;
//     }

//     .attribute-resistance-will input,
//     .resistance-points-will input {
//       border-color: #00F;
//     }
//   }
// }

// [data-bs-theme="dark"] {
//   .character-creator {
//     .attribute-resistance-fortitude input,
//     .resistance-points-fortitude input {
//       border-color: #F00;
//     }

//     .attribute-resistance-reflex input,
//     .resistance-points-reflex input {
//       border-color: #0F0;
//     }

//     .attribute-resistance-will input,
//     .resistance-points-will input {
//       border-color: #00F;
//     }
//   }
// }

.character-creator {
  /* Cool, but breaks tab order (and no pure CSS fix it seems!) https://adrianroselli.com/2015/10/html-source-order-vs-css-display-order.html
  @include media-breakpoint-between(xs, sm) {
    .grid>div.attribute-resistance-fortitude {
      order: 1;
    }

    .grid>div.resistance-points-fortitude {
      order: 2;
    }

    .grid>div.attribute-resistance-reflex {
      order: 3;
    }

    .grid>div.resistance-points-reflex {
      order: 4;
    }

    .grid>div.attribute-resistance-will {
      order: 5;
    }

    .grid>div.resistance-points-will {
      order: 6;
    }

    .grid>div.resistance-points~div:not(.resistance-points) {
      order: 7;
    }
  }
  */

  @include media-breakpoint-between(sm, md) {
    .grid>div.attribute-strength {
      order: 1;
    }

    .grid>div.attribute-dexterity {
      order: 2;
    }

    .grid>div.attribute-intelligence {
      order: 3;
    }

    .grid>div.attribute-constitution {
      order: 4;
    }

    .grid>div.attribute-perception {
      order: 5;
    }

    .grid>div.attribute-spirit {
      order: 6;
    }

    .grid>div.resistance-points {
      order: 7;
    }

    .grid>div.resistance-points~div:not(.resistance-points) {
      order: 8;
    }
  }

  .resistance-points-total {
    min-width: 3.3rem;
    flex-grow: .2;
    text-overflow: ellipsis;
  }

  // @include media-breakpoint-up(md) {
  //   .resistance-points-total {
  //     flex-grow: .2;
  //   }
  // }

  // @include media-breakpoint-up(lg) {
  //   .resistance-points-total {
  //     flex-grow: .1;
  //   }
  // }
}
